//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getEvent(id?: string | undefined): Observable<EventDto> {
        let url_ = this.baseUrl + "/data/event?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEvent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventDto>;
        }));
    }

    protected processGetEvent(response: HttpResponseBase): Observable<EventDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDto>(null as any);
    }

    listSessions(id?: string | undefined): Observable<SessionDto[]> {
        let url_ = this.baseUrl + "/data/sessions?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListSessions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListSessions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SessionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SessionDto[]>;
        }));
    }

    protected processListSessions(response: HttpResponseBase): Observable<SessionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SessionDto[]>(null as any);
    }

    getSession(id?: string | undefined): Observable<SessionDto> {
        let url_ = this.baseUrl + "/data/session?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SessionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SessionDto>;
        }));
    }

    protected processGetSession(response: HttpResponseBase): Observable<SessionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SessionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SessionDto>(null as any);
    }

    listTimingSessions(id?: string | undefined): Observable<TimingSessionDto[]> {
        let url_ = this.baseUrl + "/data/timing-sessions?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListTimingSessions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListTimingSessions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TimingSessionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TimingSessionDto[]>;
        }));
    }

    protected processListTimingSessions(response: HttpResponseBase): Observable<TimingSessionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimingSessionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TimingSessionDto[]>(null as any);
    }

    getTimingSession(id?: string | undefined): Observable<TimingSessionDto> {
        let url_ = this.baseUrl + "/data/timing-session?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimingSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TimingSessionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TimingSessionDto>;
        }));
    }

    protected processGetTimingSession(response: HttpResponseBase): Observable<TimingSessionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimingSessionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TimingSessionDto>(null as any);
    }

    deleteTimingSession(id?: string | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/data/timing-session?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTimingSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processDeleteTimingSession(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    addTimingSession(timingSessionDto: TimingSessionDto): Observable<string> {
        let url_ = this.baseUrl + "/data/timing-session";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timingSessionDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddTimingSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddTimingSession(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    startTimingSession(id?: string | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/data/timing-session-start?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartTimingSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processStartTimingSession(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    stopTimingSession(id?: string | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/data/timing-session-stop?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStopTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStopTimingSession(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processStopTimingSession(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    purgeUpstreamData(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/data/upstream/purge";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPurgeUpstreamData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPurgeUpstreamData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processPurgeUpstreamData(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    downloadUpstreamData(forceFullSync?: boolean | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/data/upstream?";
        if (forceFullSync === null)
            throw new Error("The parameter 'forceFullSync' cannot be null.");
        else if (forceFullSync !== undefined)
            url_ += "forceFullSync=" + encodeURIComponent("" + forceFullSync) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadUpstreamData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadUpstreamData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDownloadUpstreamData(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    listSeries(): Observable<SeriesDto[]> {
        let url_ = this.baseUrl + "/data/series";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListSeries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListSeries(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SeriesDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SeriesDto[]>;
        }));
    }

    protected processListSeries(response: HttpResponseBase): Observable<SeriesDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SeriesDto[]>(null as any);
    }

    listChampionships(value?: string | undefined): Observable<ChampionshipDto[]> {
        let url_ = this.baseUrl + "/data/championships?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListChampionships(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListChampionships(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChampionshipDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChampionshipDto[]>;
        }));
    }

    protected processListChampionships(response: HttpResponseBase): Observable<ChampionshipDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChampionshipDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChampionshipDto[]>(null as any);
    }

    listClasses(value?: string | undefined): Observable<ClassDto[]> {
        let url_ = this.baseUrl + "/data/classes?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListClasses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListClasses(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClassDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClassDto[]>;
        }));
    }

    protected processListClasses(response: HttpResponseBase): Observable<ClassDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClassDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClassDto[]>(null as any);
    }

    listEvents(value?: string | undefined): Observable<EventDto[]> {
        let url_ = this.baseUrl + "/data/events?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventDto[]>;
        }));
    }

    protected processListEvents(response: HttpResponseBase): Observable<EventDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDto[]>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class MetadataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTimingSessionUpdate(): Observable<TimingSessionUpdate> {
        let url_ = this.baseUrl + "/_metadata";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimingSessionUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimingSessionUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TimingSessionUpdate>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TimingSessionUpdate>;
        }));
    }

    protected processGetTimingSessionUpdate(response: HttpResponseBase): Observable<TimingSessionUpdate> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimingSessionUpdate.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TimingSessionUpdate>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StoreClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    showHelp(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processShowHelp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processShowHelp(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processShowHelp(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    singleGet(collection: string, id: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSingleGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSingleGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSingleGet(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    singleDelete(collection: string, id: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSingleDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSingleDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSingleDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    singlePutPOST(collection: string, body: any, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSinglePutPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSinglePutPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSinglePutPOST(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    singlePutPUT(collection: string, body: any, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSinglePutPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSinglePutPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSinglePutPUT(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    search(collection: string, where?: string | null | undefined, order?: string | null | undefined, limit?: number | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/search?";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (where !== undefined && where !== null)
            url_ += "where=" + encodeURIComponent("" + where) + "&";
        if (order !== undefined && order !== null)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    count(collection: string, where?: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/count?";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (where !== undefined && where !== null)
            url_ += "where=" + encodeURIComponent("" + where) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processCount(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }
}

export class EventDto implements IEventDto {
    date?: string | undefined;
    regulations?: string | undefined;
    resultsTemplate?: string | undefined;
    championshipId?: string;
    organizationId?: string;
    startOfRegistration?: DateTime;
    endOfRegistration?: DateTime;
    basePrice?: number;
    paymentMultiplier?: number;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IEventDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.regulations = _data["regulations"];
            this.resultsTemplate = _data["resultsTemplate"];
            this.championshipId = _data["championshipId"];
            this.organizationId = _data["organizationId"];
            this.startOfRegistration = _data["startOfRegistration"] ? DateTime.fromISO(_data["startOfRegistration"].toString()) : <any>undefined;
            this.endOfRegistration = _data["endOfRegistration"] ? DateTime.fromISO(_data["endOfRegistration"].toString()) : <any>undefined;
            this.basePrice = _data["basePrice"];
            this.paymentMultiplier = _data["paymentMultiplier"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EventDto {
        data = typeof data === 'object' ? data : {};
        let result = new EventDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["regulations"] = this.regulations;
        data["resultsTemplate"] = this.resultsTemplate;
        data["championshipId"] = this.championshipId;
        data["organizationId"] = this.organizationId;
        data["startOfRegistration"] = this.startOfRegistration ? this.startOfRegistration.toString() : <any>undefined;
        data["endOfRegistration"] = this.endOfRegistration ? this.endOfRegistration.toString() : <any>undefined;
        data["basePrice"] = this.basePrice;
        data["paymentMultiplier"] = this.paymentMultiplier;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface IEventDto {
    date?: string | undefined;
    regulations?: string | undefined;
    resultsTemplate?: string | undefined;
    championshipId?: string;
    organizationId?: string;
    startOfRegistration?: DateTime;
    endOfRegistration?: DateTime;
    basePrice?: number;
    paymentMultiplier?: number;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class SessionDto implements ISessionDto {
    eventId?: string;
    minLap?: Duration;
    startTime?: DateTime;
    finishCriteria?: FinishCriteriaDto | undefined;
    classIds?: string[] | undefined;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ISessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.minLap = _data["minLap"] ? Duration.fromISO(_data["minLap"].toString()) : <any>undefined;
            this.startTime = _data["startTime"] ? DateTime.fromISO(_data["startTime"].toString()) : <any>undefined;
            this.finishCriteria = _data["finishCriteria"] ? FinishCriteriaDto.fromJS(_data["finishCriteria"]) : <any>undefined;
            if (Array.isArray(_data["classIds"])) {
                this.classIds = [] as any;
                for (let item of _data["classIds"])
                    this.classIds!.push(item);
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new SessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["minLap"] = this.minLap ? this.minLap.toString() : <any>undefined;
        data["startTime"] = this.startTime ? this.startTime.toString() : <any>undefined;
        data["finishCriteria"] = this.finishCriteria ? this.finishCriteria.toJSON() : <any>undefined;
        if (Array.isArray(this.classIds)) {
            data["classIds"] = [];
            for (let item of this.classIds)
                data["classIds"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface ISessionDto {
    eventId?: string;
    minLap?: Duration;
    startTime?: DateTime;
    finishCriteria?: FinishCriteriaDto | undefined;
    classIds?: string[] | undefined;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class FinishCriteriaDto implements IFinishCriteriaDto {
    duration?: Duration;
    totalLaps?: number | undefined;
    lapsAfterDuration?: number;
    skipStartingCheckpoint?: boolean;
    forceFinishOnly?: boolean;
    individualTiming?: boolean;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IFinishCriteriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.duration = _data["duration"] ? Duration.fromISO(_data["duration"].toString()) : <any>undefined;
            this.totalLaps = _data["totalLaps"];
            this.lapsAfterDuration = _data["lapsAfterDuration"];
            this.skipStartingCheckpoint = _data["skipStartingCheckpoint"];
            this.forceFinishOnly = _data["forceFinishOnly"];
            this.individualTiming = _data["individualTiming"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FinishCriteriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new FinishCriteriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["duration"] = this.duration ? this.duration.toString() : <any>undefined;
        data["totalLaps"] = this.totalLaps;
        data["lapsAfterDuration"] = this.lapsAfterDuration;
        data["skipStartingCheckpoint"] = this.skipStartingCheckpoint;
        data["forceFinishOnly"] = this.forceFinishOnly;
        data["individualTiming"] = this.individualTiming;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface IFinishCriteriaDto {
    duration?: Duration;
    totalLaps?: number | undefined;
    lapsAfterDuration?: number;
    skipStartingCheckpoint?: boolean;
    forceFinishOnly?: boolean;
    individualTiming?: boolean;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class TimingSessionDto implements ITimingSessionDto {
    sessionId?: string;
    gateId?: string;
    eventId?: string;
    isRunning?: boolean;
    useRfid?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ITimingSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            this.gateId = _data["gateId"];
            this.eventId = _data["eventId"];
            this.isRunning = _data["isRunning"];
            this.useRfid = _data["useRfid"];
            this.startTime = _data["startTime"] ? DateTime.fromISO(_data["startTime"].toString()) : <any>undefined;
            this.stopTime = _data["stopTime"] ? DateTime.fromISO(_data["stopTime"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TimingSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimingSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["gateId"] = this.gateId;
        data["eventId"] = this.eventId;
        data["isRunning"] = this.isRunning;
        data["useRfid"] = this.useRfid;
        data["startTime"] = this.startTime ? this.startTime.toString() : <any>undefined;
        data["stopTime"] = this.stopTime ? this.stopTime.toString() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface ITimingSessionDto {
    sessionId?: string;
    gateId?: string;
    eventId?: string;
    isRunning?: boolean;
    useRfid?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class SeriesDto implements ISeriesDto {
    id?: string;
    organizationId?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ISeriesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.organizationId = _data["organizationId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SeriesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeriesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationId"] = this.organizationId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface ISeriesDto {
    id?: string;
    organizationId?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class ChampionshipDto implements IChampionshipDto {
    seriesId?: string;
    organizationId?: string;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IChampionshipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seriesId = _data["seriesId"];
            this.organizationId = _data["organizationId"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ChampionshipDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChampionshipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seriesId"] = this.seriesId;
        data["organizationId"] = this.organizationId;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface IChampionshipDto {
    seriesId?: string;
    organizationId?: string;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class ClassDto implements IClassDto {
    championshipId?: string;
    numberGroupId?: string;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IClassDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.championshipId = _data["championshipId"];
            this.numberGroupId = _data["numberGroupId"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.published = _data["published"];
            this.isSeed = _data["isSeed"];
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ClassDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["championshipId"] = this.championshipId;
        data["numberGroupId"] = this.numberGroupId;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["published"] = this.published;
        data["isSeed"] = this.isSeed;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toString() : <any>undefined;
        return data;
    }
}

export interface IClassDto {
    championshipId?: string;
    numberGroupId?: string;
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class TimingSessionUpdate implements ITimingSessionUpdate {
    rating?: RoundPosition[] | undefined;

    constructor(data?: ITimingSessionUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rating"])) {
                this.rating = [] as any;
                for (let item of _data["rating"])
                    this.rating!.push(RoundPosition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TimingSessionUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new TimingSessionUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rating)) {
            data["rating"] = [];
            for (let item of this.rating)
                data["rating"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITimingSessionUpdate {
    rating?: RoundPosition[] | undefined;
}

export class RoundPosition implements IRoundPosition {
    lapCount?: number;
    laps?: Lap[] | undefined;
    duration?: Duration;
    start?: DateTime;
    end?: DateTime;
    finished?: boolean;
    started?: boolean;
    rider?: Rider | undefined;

    constructor(data?: IRoundPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lapCount = _data["lapCount"];
            if (Array.isArray(_data["laps"])) {
                this.laps = [] as any;
                for (let item of _data["laps"])
                    this.laps!.push(Lap.fromJS(item));
            }
            this.duration = _data["duration"] ? Duration.fromISO(_data["duration"].toString()) : <any>undefined;
            this.start = _data["start"] ? DateTime.fromISO(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? DateTime.fromISO(_data["end"].toString()) : <any>undefined;
            this.finished = _data["finished"];
            this.started = _data["started"];
            this.rider = _data["rider"] ? Rider.fromJS(_data["rider"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoundPosition {
        data = typeof data === 'object' ? data : {};
        let result = new RoundPosition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lapCount"] = this.lapCount;
        if (Array.isArray(this.laps)) {
            data["laps"] = [];
            for (let item of this.laps)
                data["laps"].push(item.toJSON());
        }
        data["duration"] = this.duration ? this.duration.toString() : <any>undefined;
        data["start"] = this.start ? this.start.toString() : <any>undefined;
        data["end"] = this.end ? this.end.toString() : <any>undefined;
        data["finished"] = this.finished;
        data["started"] = this.started;
        data["rider"] = this.rider ? this.rider.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRoundPosition {
    lapCount?: number;
    laps?: Lap[] | undefined;
    duration?: Duration;
    start?: DateTime;
    end?: DateTime;
    finished?: boolean;
    started?: boolean;
    rider?: Rider | undefined;
}

export class Lap implements ILap {
    start?: DateTime;
    end?: DateTime;
    duration?: Duration;
    aggDuration?: Duration;
    sequentialNumber?: number;

    constructor(data?: ILap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? DateTime.fromISO(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? DateTime.fromISO(_data["end"].toString()) : <any>undefined;
            this.duration = _data["duration"] ? Duration.fromISO(_data["duration"].toString()) : <any>undefined;
            this.aggDuration = _data["aggDuration"] ? Duration.fromISO(_data["aggDuration"].toString()) : <any>undefined;
            this.sequentialNumber = _data["sequentialNumber"];
        }
    }

    static fromJS(data: any): Lap {
        data = typeof data === 'object' ? data : {};
        let result = new Lap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toString() : <any>undefined;
        data["end"] = this.end ? this.end.toString() : <any>undefined;
        data["duration"] = this.duration ? this.duration.toString() : <any>undefined;
        data["aggDuration"] = this.aggDuration ? this.aggDuration.toString() : <any>undefined;
        data["sequentialNumber"] = this.sequentialNumber;
        return data;
    }
}

export interface ILap {
    start?: DateTime;
    end?: DateTime;
    duration?: Duration;
    aggDuration?: Duration;
    sequentialNumber?: number;
}

export class Rider implements IRider {
    id?: string | undefined;
    firstName?: string | undefined;
    parentName?: string | undefined;
    lastName?: string | undefined;
    class?: Class | undefined;
    isWrongSession?: boolean;

    constructor(data?: IRider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.parentName = _data["parentName"];
            this.lastName = _data["lastName"];
            this.class = _data["class"] ? Class.fromJS(_data["class"]) : <any>undefined;
            this.isWrongSession = _data["isWrongSession"];
        }
    }

    static fromJS(data: any): Rider {
        data = typeof data === 'object' ? data : {};
        let result = new Rider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["parentName"] = this.parentName;
        data["lastName"] = this.lastName;
        data["class"] = this.class ? this.class.toJSON() : <any>undefined;
        data["isWrongSession"] = this.isWrongSession;
        return data;
    }
}

export interface IRider {
    id?: string | undefined;
    firstName?: string | undefined;
    parentName?: string | undefined;
    lastName?: string | undefined;
    class?: Class | undefined;
    isWrongSession?: boolean;
}

export class Class implements IClass {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Class {
        data = typeof data === 'object' ? data : {};
        let result = new Class();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IClass {
    id?: string | undefined;
    name?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}