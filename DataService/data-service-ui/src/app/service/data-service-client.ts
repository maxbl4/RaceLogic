/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getEvent(value?: string | undefined): Observable<EventDto> {
        let url_ = this.baseUrl + "/data/event?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEvent(<any>response_);
                } catch (e) {
                    return <Observable<EventDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<EventDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEvent(response: HttpResponseBase): Observable<EventDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDto>(<any>null);
    }

    listSessions(value?: string | undefined): Observable<SessionDto[]> {
        let url_ = this.baseUrl + "/data/sessions?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListSessions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListSessions(<any>response_);
                } catch (e) {
                    return <Observable<SessionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SessionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListSessions(response: HttpResponseBase): Observable<SessionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SessionDto[]>(<any>null);
    }

    getSession(value?: string | undefined): Observable<SessionDto> {
        let url_ = this.baseUrl + "/data/session?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSession(<any>response_);
                } catch (e) {
                    return <Observable<SessionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SessionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSession(response: HttpResponseBase): Observable<SessionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SessionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SessionDto>(<any>null);
    }

    listTimingSessions(value?: string | undefined): Observable<TimingSessionDto[]> {
        let url_ = this.baseUrl + "/data/timing-sessions?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListTimingSessions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListTimingSessions(<any>response_);
                } catch (e) {
                    return <Observable<TimingSessionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TimingSessionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListTimingSessions(response: HttpResponseBase): Observable<TimingSessionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimingSessionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TimingSessionDto[]>(<any>null);
    }

    getTimingSession(value?: string | undefined): Observable<TimingSessionDto> {
        let url_ = this.baseUrl + "/data/timing-session?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimingSession(<any>response_);
                } catch (e) {
                    return <Observable<TimingSessionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TimingSessionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTimingSession(response: HttpResponseBase): Observable<TimingSessionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimingSessionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TimingSessionDto>(<any>null);
    }

    listRecordingSessions(value?: string | undefined): Observable<RecordingSessionDto[]> {
        let url_ = this.baseUrl + "/data/recording-sessions?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListRecordingSessions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListRecordingSessions(<any>response_);
                } catch (e) {
                    return <Observable<RecordingSessionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecordingSessionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListRecordingSessions(response: HttpResponseBase): Observable<RecordingSessionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecordingSessionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecordingSessionDto[]>(<any>null);
    }

    startTimingSession(value?: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/data/timing-session-start?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartTimingSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartTimingSession(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processStartTimingSession(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    purgeUpstreamData(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/data/upstream/purge";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPurgeUpstreamData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPurgeUpstreamData(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processPurgeUpstreamData(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    downloadUpstreamData(forceFullSync?: boolean | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/data/upstream?";
        if (forceFullSync === null)
            throw new Error("The parameter 'forceFullSync' cannot be null.");
        else if (forceFullSync !== undefined)
            url_ += "forceFullSync=" + encodeURIComponent("" + forceFullSync) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadUpstreamData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadUpstreamData(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadUpstreamData(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    listSeries(): Observable<SeriesDto[]> {
        let url_ = this.baseUrl + "/data/series";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListSeries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListSeries(<any>response_);
                } catch (e) {
                    return <Observable<SeriesDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SeriesDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListSeries(response: HttpResponseBase): Observable<SeriesDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SeriesDto[]>(<any>null);
    }

    listChampionships(value?: string | undefined): Observable<ChampionshipDto[]> {
        let url_ = this.baseUrl + "/data/championships?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListChampionships(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListChampionships(<any>response_);
                } catch (e) {
                    return <Observable<ChampionshipDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ChampionshipDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListChampionships(response: HttpResponseBase): Observable<ChampionshipDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChampionshipDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChampionshipDto[]>(<any>null);
    }

    listClasses(value?: string | undefined): Observable<ClassDto[]> {
        let url_ = this.baseUrl + "/data/classes?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListClasses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListClasses(<any>response_);
                } catch (e) {
                    return <Observable<ClassDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClassDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListClasses(response: HttpResponseBase): Observable<ClassDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClassDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClassDto[]>(<any>null);
    }

    listEvents(value?: string | undefined): Observable<EventDto[]> {
        let url_ = this.baseUrl + "/data/events?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListEvents(<any>response_);
                } catch (e) {
                    return <Observable<EventDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EventDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListEvents(response: HttpResponseBase): Observable<EventDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDto[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StoreClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    showHelp(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processShowHelp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processShowHelp(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processShowHelp(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    singleGet(collection: string | null, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSingleGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSingleGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSingleGet(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    singleDelete(collection: string | null, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSingleDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSingleDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSingleDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    singlePut(collection: string | null, body: any, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSinglePut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSinglePut(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSinglePut(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    singlePut2(collection: string | null, body: any, id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/single/{id}";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSinglePut2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSinglePut2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSinglePut2(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    search(collection: string | null, where?: string | null | undefined, order?: string | null | undefined, limit?: number | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/search?";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (where !== undefined && where !== null)
            url_ += "where=" + encodeURIComponent("" + where) + "&";
        if (order !== undefined && order !== null)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    count(collection: string | null, where?: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/store/{collection}/count?";
        if (collection === undefined || collection === null)
            throw new Error("The parameter 'collection' must be defined.");
        url_ = url_.replace("{collection}", encodeURIComponent("" + collection));
        if (where !== undefined && where !== null)
            url_ += "where=" + encodeURIComponent("" + where) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCount(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCount(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class EventDto implements IEventDto {
    date?: string | null;
    regulations?: string | null;
    resultsTemplate?: string | null;
    championshipId?: string;
    startOfRegistration?: DateTime;
    endOfRegistration?: DateTime;
    basePrice?: number;
    paymentMultiplier?: number;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IEventDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] !== undefined ? _data["date"] : <any>null;
            this.regulations = _data["regulations"] !== undefined ? _data["regulations"] : <any>null;
            this.resultsTemplate = _data["resultsTemplate"] !== undefined ? _data["resultsTemplate"] : <any>null;
            this.championshipId = _data["championshipId"] !== undefined ? _data["championshipId"] : <any>null;
            this.startOfRegistration = _data["startOfRegistration"] ? DateTime.fromISO(_data["startOfRegistration"].toString()) : <any>null;
            this.endOfRegistration = _data["endOfRegistration"] ? DateTime.fromISO(_data["endOfRegistration"].toString()) : <any>null;
            this.basePrice = _data["basePrice"] !== undefined ? _data["basePrice"] : <any>null;
            this.paymentMultiplier = _data["paymentMultiplier"] !== undefined ? _data["paymentMultiplier"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EventDto {
        data = typeof data === 'object' ? data : {};
        let result = new EventDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date !== undefined ? this.date : <any>null;
        data["regulations"] = this.regulations !== undefined ? this.regulations : <any>null;
        data["resultsTemplate"] = this.resultsTemplate !== undefined ? this.resultsTemplate : <any>null;
        data["championshipId"] = this.championshipId !== undefined ? this.championshipId : <any>null;
        data["startOfRegistration"] = this.startOfRegistration ? this.startOfRegistration.toString() : <any>null;
        data["endOfRegistration"] = this.endOfRegistration ? this.endOfRegistration.toString() : <any>null;
        data["basePrice"] = this.basePrice !== undefined ? this.basePrice : <any>null;
        data["paymentMultiplier"] = this.paymentMultiplier !== undefined ? this.paymentMultiplier : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface IEventDto {
    date?: string | null;
    regulations?: string | null;
    resultsTemplate?: string | null;
    championshipId?: string;
    startOfRegistration?: DateTime;
    endOfRegistration?: DateTime;
    basePrice?: number;
    paymentMultiplier?: number;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class SessionDto implements ISessionDto {
    eventId?: string;
    minLap?: Duration;
    startTime?: DateTime;
    finishCriteria?: FinishCriteriaDto | null;
    classIds?: string[] | null;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ISessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.minLap = _data["minLap"] ? Duration.fromISO(_data["minLap"].toString()) : <any>null;
            this.startTime = _data["startTime"] ? DateTime.fromISO(_data["startTime"].toString()) : <any>null;
            this.finishCriteria = _data["finishCriteria"] ? FinishCriteriaDto.fromJS(_data["finishCriteria"]) : <any>null;
            if (Array.isArray(_data["classIds"])) {
                this.classIds = [] as any;
                for (let item of _data["classIds"])
                    this.classIds!.push(item);
            }
            else {
                this.classIds = <any>null;
            }
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new SessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["minLap"] = this.minLap ? this.minLap.toString() : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toString() : <any>null;
        data["finishCriteria"] = this.finishCriteria ? this.finishCriteria.toJSON() : <any>null;
        if (Array.isArray(this.classIds)) {
            data["classIds"] = [];
            for (let item of this.classIds)
                data["classIds"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface ISessionDto {
    eventId?: string;
    minLap?: Duration;
    startTime?: DateTime;
    finishCriteria?: FinishCriteriaDto | null;
    classIds?: string[] | null;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class FinishCriteriaDto implements IFinishCriteriaDto {
    duration?: Duration;
    totalLaps?: number | null;
    lapsAfterDuration?: number;
    skipStartingCheckpoint?: boolean;
    forceFinishOnly?: boolean;
    individualTiming?: boolean;
    id?: string;
    name?: string | null;
    description?: string | null;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IFinishCriteriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.duration = _data["duration"] ? Duration.fromISO(_data["duration"].toString()) : <any>null;
            this.totalLaps = _data["totalLaps"] !== undefined ? _data["totalLaps"] : <any>null;
            this.lapsAfterDuration = _data["lapsAfterDuration"] !== undefined ? _data["lapsAfterDuration"] : <any>null;
            this.skipStartingCheckpoint = _data["skipStartingCheckpoint"] !== undefined ? _data["skipStartingCheckpoint"] : <any>null;
            this.forceFinishOnly = _data["forceFinishOnly"] !== undefined ? _data["forceFinishOnly"] : <any>null;
            this.individualTiming = _data["individualTiming"] !== undefined ? _data["individualTiming"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): FinishCriteriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new FinishCriteriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["duration"] = this.duration ? this.duration.toString() : <any>null;
        data["totalLaps"] = this.totalLaps !== undefined ? this.totalLaps : <any>null;
        data["lapsAfterDuration"] = this.lapsAfterDuration !== undefined ? this.lapsAfterDuration : <any>null;
        data["skipStartingCheckpoint"] = this.skipStartingCheckpoint !== undefined ? this.skipStartingCheckpoint : <any>null;
        data["forceFinishOnly"] = this.forceFinishOnly !== undefined ? this.forceFinishOnly : <any>null;
        data["individualTiming"] = this.individualTiming !== undefined ? this.individualTiming : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface IFinishCriteriaDto {
    duration?: Duration;
    totalLaps?: number | null;
    lapsAfterDuration?: number;
    skipStartingCheckpoint?: boolean;
    forceFinishOnly?: boolean;
    individualTiming?: boolean;
    id?: string;
    name?: string | null;
    description?: string | null;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class TimingSessionDto implements ITimingSessionDto {
    sessionId?: string;
    recordingSessionId?: string;
    eventId?: string;
    isRunning?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ITimingSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"] !== undefined ? _data["sessionId"] : <any>null;
            this.recordingSessionId = _data["recordingSessionId"] !== undefined ? _data["recordingSessionId"] : <any>null;
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.isRunning = _data["isRunning"] !== undefined ? _data["isRunning"] : <any>null;
            this.startTime = _data["startTime"] ? DateTime.fromISO(_data["startTime"].toString()) : <any>null;
            this.stopTime = _data["stopTime"] ? DateTime.fromISO(_data["stopTime"].toString()) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TimingSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimingSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["recordingSessionId"] = this.recordingSessionId !== undefined ? this.recordingSessionId : <any>null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["isRunning"] = this.isRunning !== undefined ? this.isRunning : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toString() : <any>null;
        data["stopTime"] = this.stopTime ? this.stopTime.toString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface ITimingSessionDto {
    sessionId?: string;
    recordingSessionId?: string;
    eventId?: string;
    isRunning?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class RecordingSessionDto implements IRecordingSessionDto {
    eventId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    isRunning?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IRecordingSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isRunning = _data["isRunning"] !== undefined ? _data["isRunning"] : <any>null;
            this.startTime = _data["startTime"] ? DateTime.fromISO(_data["startTime"].toString()) : <any>null;
            this.stopTime = _data["stopTime"] ? DateTime.fromISO(_data["stopTime"].toString()) : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RecordingSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecordingSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isRunning"] = this.isRunning !== undefined ? this.isRunning : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toString() : <any>null;
        data["stopTime"] = this.stopTime ? this.stopTime.toString() : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface IRecordingSessionDto {
    eventId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    isRunning?: boolean;
    startTime?: DateTime;
    stopTime?: DateTime;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class SeriesDto implements ISeriesDto {
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: ISeriesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SeriesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeriesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface ISeriesDto {
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class ChampionshipDto implements IChampionshipDto {
    seriesId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IChampionshipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seriesId = _data["seriesId"] !== undefined ? _data["seriesId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ChampionshipDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChampionshipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seriesId"] = this.seriesId !== undefined ? this.seriesId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface IChampionshipDto {
    seriesId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export class ClassDto implements IClassDto {
    championshipId?: string;
    numberGroupId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;

    constructor(data?: IClassDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.championshipId = _data["championshipId"] !== undefined ? _data["championshipId"] : <any>null;
            this.numberGroupId = _data["numberGroupId"] !== undefined ? _data["numberGroupId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.published = _data["published"] !== undefined ? _data["published"] : <any>null;
            this.isSeed = _data["isSeed"] !== undefined ? _data["isSeed"] : <any>null;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>null;
            this.updated = _data["updated"] ? DateTime.fromISO(_data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ClassDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["championshipId"] = this.championshipId !== undefined ? this.championshipId : <any>null;
        data["numberGroupId"] = this.numberGroupId !== undefined ? this.numberGroupId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["published"] = this.published !== undefined ? this.published : <any>null;
        data["isSeed"] = this.isSeed !== undefined ? this.isSeed : <any>null;
        data["created"] = this.created ? this.created.toString() : <any>null;
        data["updated"] = this.updated ? this.updated.toString() : <any>null;
        return data; 
    }
}

export interface IClassDto {
    championshipId?: string;
    numberGroupId?: string;
    id?: string;
    name?: string | null;
    description?: string | null;
    published?: boolean;
    isSeed?: boolean;
    created?: DateTime;
    updated?: DateTime;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}